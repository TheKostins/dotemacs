
#+TITLE: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Esential settings
** Custom file
#+begin_src emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src
** Package manare (elpaca)
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src 

Disable package.el in early-init.el
#+begin_src emacs-lisp :tangle early-init.el
(setq package-enable-at-startup nil)
#+end_src

Load use-package
#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)
#+end_src

** Meow - better evil
Setup keymap
#+begin_src emacs-lisp
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))
#+end_src

#+begin_src emacs-lisp
  (use-package meow
    :diminish t
    :config
    (meow-setup)
    (meow-setup-indicator)
    (meow-global-mode 1))
#+end_src

* UI
** Basic tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))

  ;; Allow normal resizing
  (setq frame-resize-pixelwise t)
#+end_src
** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+end_src
** Fonts
#+begin_src emacs-lisp
  (defmacro my/set-font-function (face)
    `(lambda (sym val)
      (let ((font (car val))
             (height (cdr val)))
         (set-face-attribute ,face nil
                             :font font
                             :height (* height 10))
         (set-default sym val))))

  (defgroup user-font nil
    "Customize fonts")

  (defcustom fixed-pitch-font '("DejaVu Sans Mono" . 13)
    "Font used for displayind code & etc."
    :type '(cons string integer)
    :group 'user-font
    :set (my/set-font-function 'fixed-pitch)
    :initialize #'custom-initialize-set)

  (defcustom variable-pitch-font '("DejaVu Sans" . 13)
    "Font used for displayind code & etc."
    :type '(cons string integer)
    :group 'user-font
    :set (my/set-font-function 'variable-pitch)
    :initialize #'custom-initialize-set)

  (defcustom default-font '("DejaVu Sans Mono" . 13)
    "Font used for displayind code & etc."
    :type '(cons string integer)
    :group 'user-font
    :set (lambda (sym var)
           (let ((font (car var))
                 (height (cdr var)))
             (add-to-list 'default-frame-alist `(font . ,(concat font "-" (number-to-string height))))
             (funcall (my/set-font-function 'default) sym var)))
    :initialize #'custom-initialize-set)

  ;;(set-face-attribute 'default nil
  ;;                    :font "JetBrains Mono"
  ;;                    :height 120)
  ;;(set-face-attribute 'variable-pitch nil
  ;;                    :font "DejaVu Sans"
  ;;                    :height  120)
  ;;(set-face-attribute 'fixed-pitch nil
  ;;                    :font "JetBrains Mono"
  ;;                    :height 120)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  ;;(set-face-attribute 'font-lock-comment-face nil
  ;;                    :slant 'italic)
  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono-12"))

  ;; Uncomment the following line if line spacing needs adjusting.
  ;;(setq-default line-spacing 0.12)
#+end_src

*** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :load-path "path-to-ligature-repo"
    :config
    ;; Enable all JetBrains Mono ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                        "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                        "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                        "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                        "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                        "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                        ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                        "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                        "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                        "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                        "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** Org
#+begin_src emacs-lisp
  (defun my/org-setup-faces ()
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

  (defun my/org-mode-setup ()
    (my/org-setup-faces)
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :demand t
    :hook (org-mode . my/org-mode-setup))
  (use-package org-faces
    :elpaca nil
    :after org
    :demand t)
#+end_src

* Completion
** Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :elpaca (:files (:defaults "extensions/*")) 
    :custom
    (corfu-auto-prefix 2) 
    (corfu-auto t)
    :init
    (global-corfu-mode))


  (use-package corfu-popupinfo
    :elpaca nil
    :after corfu
    :init
    (corfu-popupinfo-mode 1)
    :bind (:map corfu-popupinfo-map
                ("M-j" . corfu-popupinfo-scroll-up)
                ("M-k" . corfu-popupinfo-scroll-down)))

  ;; A few more useful configurations...
  (use-package emacs
    :elpaca nil
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src
** Vertico
#+begin_src emacs-lisp
    (use-package vertico
      :elpaca (:files (:defaults "extensions/*"))
      :init
      (vertico-mode))

    ;; Configure directory extension.
    (use-package vertico-directory
      :after vertico
      :elpaca nil
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

    (use-package savehist
      :elpaca nil
      :after no-littering
      :config
      (setq savehist-file
            (no-littering-expand-var-file-name "savehist.el"))
      (savehist-mode))

    (use-package emacs
      :elpaca nil
      :init
      ;; Add prompt indicator to `completing-read-multiple'.
      ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
      (defun crm-indicator (args)
        (cons (format "[CRM%s] %s"
                      (replace-regexp-in-string
                       "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                       crm-separator)
                      (car args))
              (cdr args)))
      (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

      ;; Do not allow the cursor in the minibuffer prompt
      (setq minibuffer-prompt-properties
            '(read-only t cursor-intangible t face minibuffer-prompt))
      (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

      ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
      ;; Vertico commands are hidden in normal buffers.
      ;; (setq read-extended-command-predicate
      ;;       #'command-completion-default-include-p)

      ;; Enable recursive minibuffers
      (setq enable-recursive-minibuffers t))
#+end_src
*** Marginilia
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :after meow
    :init
    (recentf-mode 1)
    :bind
    ("C-c b b" . consult-buffer)
    ("C-c s b" . consult-line))
#+end_src
** Orderless
#+begin_src emacs-lisp
    (use-package orderless
      :demand t
      :config

      (defun +orderless--consult-suffix ()
        "Regexp which matches the end of string with Consult tofu support."
        (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
            (format "[%c-%c]*$"
                    consult--tofu-char
                    (+ consult--tofu-char consult--tofu-range -1))
          "$"))

      ;; Recognizes the following patterns:
      ;; * .ext (file extension)
      ;; * regexp$ (regexp matching at end)
      (defun +orderless-consult-dispatch (word _index _total)
        (cond
         ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
         ((string-suffix-p "$" word)
          `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
         ;; File extensions
         ((and (or minibuffer-completing-file-name
                   (derived-mode-p 'eshell-mode))
               (string-match-p "\\`\\.." word))
          `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

      ;; Define orderless style with initialism by default
      (orderless-define-completion-style +orderless-with-initialism
        (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

      ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
      ;; There are many details to consider, but the following configurations all work well.
      ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
      ;; special styles for special completion categories, e.g., partial-completion for files.
      ;;
      ;; 1. (setq completion-styles '(orderless))
      ;; This configuration results in a very coherent completion experience,
      ;; since orderless is used always and exclusively. But it may not work
      ;; in all scenarios. Prefix expansion with TAB is not possible.
      ;;
      ;; 2. (setq completion-styles '(substring orderless))
      ;; By trying substring before orderless, TAB expansion is possible.
      ;; The downside is that you can observe the switch from substring to orderless
      ;; during completion, less coherent.
      ;;
      ;; 3. (setq completion-styles '(orderless basic))
      ;; Certain dynamic completion tables (completion-table-dynamic)
      ;; do not work properly with orderless. One can add basic as a fallback.
      ;; Basic will only be used when orderless fails, which happens only for
      ;; these special tables.
      ;;
      ;; 4. (setq completion-styles '(substring orderless basic))
      ;; Combine substring, orderless and basic.
      ;;
      (setq completion-styles '(orderless basic)
            completion-category-defaults nil
            ;;; Enable partial-completion for files.
            ;;; Either give orderless precedence or partial-completion.
            ;;; Note that completion-category-overrides is not really an override,
            ;;; but rather prepended to the default completion-styles.
            ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
            completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                            ;; enable initialism by default for symbols
                                            (command (styles +orderless-with-initialism))
                                            (variable (styles +orderless-with-initialism))
                                            (symbol (styles +orderless-with-initialism)))
            orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
            orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                              #'orderless-affix-dispatch)))
#+end_src
** Cape
#+begin_src emacs-lisp
  (use-package cape
    :config
    (dolist (capf (list
                   #'cape-dabbrev
                   #'cape-file))
      (add-to-list 'completion-at-point-functions capf)))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish t
    :config (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+end_src

Snippet autosuggestions
#+begin_src emacs-lisp 
  (use-package company
    :config
    (add-to-list 'completion-at-point-functions (cape-company-to-capf #'company-yasnippet)))
#+end_src

* Emacs tweaks & improvements
** Helpful
Better documentation
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    (([remap describe-function] . helpful-callable)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-key] . helpful-key)
     ([remap describe-command] . helpful-command)))
#+end_src
** No littering
Keep folders clean
#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))
          lock-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "lock-file/") t))
          backup-directory-alist
          `(("." . ,(no-littering-expand-var-file-name "backup-file/")))))
#+end_src
** Windmove
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c w k") 'windmove-up)
  (global-set-key (kbd "C-c w j") 'windmove-down)
  (global-set-key (kbd "C-c w h") 'windmove-left)
  (global-set-key (kbd "C-c w l") 'windmove-right)
  (global-set-key (kbd "C-c w d") 'delete-window)
  (global-set-key (kbd "C-c w |") 'split-window-right)
  (global-set-key (kbd "C-c w -") 'split-window-below)
  (global-set-key (kbd "C-c w H") 'windmove-swap-states-left)
  (global-set-key (kbd "C-c w L") 'windmove-swap-states-right)
  (global-set-key (kbd "C-c w K") 'windmove-swap-states-up)
  (global-set-key (kbd "C-c w J") 'windmove-swap-states-down)
#+end_src
* Project management
** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Language support
** Fish
#+begin_src emacs-lisp
(use-package fish-mode)
#+end_src
